diff --git a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
index 53d5988..9b8ad77 100644
--- a/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
+++ b/node_modules/matrix-react-sdk/res/css/views/auth/_CompleteSecurityBody.pcss
@@ -16,7 +16,12 @@ limitations under the License.
 */
 
 .mx_CompleteSecurityBody {
+    /* :TCHAP:
     width: 600px;
+    */
+    width: 660px;
+    /* end :TCHAP: */
+
     color: $authpage-primary-color;
     background-color: $background;
     border-radius: 4px;
diff --git a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
index 1be7fd0..0428296 100644
--- a/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
+++ b/node_modules/matrix-react-sdk/src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx
@@ -186,13 +186,38 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                 backupInfo && cli.isCryptoEnabled() ? await cli.isKeyBackupTrusted(backupInfo) : null;
 
             const { forceReset } = this.props;
-            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            // :tchap: const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ChooseKeyPassphrase;
+            const phase = backupInfo && !forceReset ? Phase.Migrate : Phase.ShowKey;//:tchap: goes directly to showkey
 
+            /* :TCHAP: remove
             this.setState({
                 phase,
                 backupInfo,
                 backupSigStatus,
             });
+            end :TCHAP: */
+
+            // add :TCHAP:
+            if (phase === Phase.ShowKey) {
+                this.recoveryKey = await MatrixClientPeg.get().createRecoveryKeyFromPassphrase();
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                    passPhraseKeySelected:SecureBackupSetupMethod.Key,
+                    copied: false,
+                    downloaded: false,
+                    setPassphrase: false
+                });
+            } else {
+                //if phase is Phase.Migrate
+                this.setState({
+                    phase,
+                    backupInfo,
+                    backupSigStatus,
+                });
+            }
+            // end :TCHAP:
 
             return {
                 backupInfo: backupInfo ?? undefined,
@@ -730,10 +755,17 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
         if (this.state.phase === Phase.ShowKey) {
             continueButton = (
                 <DialogButtons
+                    // :tchap: change label
+                    // primaryButton={_t("Continue")}
                     primaryButton={_t("action|continue")}
-                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    cancelButtonClass="mx_AccessibleButton mx_AccessibleButton_hasKind mx_AccessibleButton_kind_danger_outline"
+                    hasCancel
+                    onCancel={this.onCancel}
+                    primaryDisabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
+                    // end :tchap:
+                    // TCHAP: disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}
                     onPrimaryButtonClick={this.onShowKeyContinueClick}
-                    hasCancel={false}
+                    // TCHAP: hasCancel={false}
                 />
             );
         } else {
@@ -746,6 +778,10 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
 
         return (
             <div>
+                {/* tchap: add this <p /> */}
+                <p>{_t("This is your recovery key")}</p>
+                <p><b>{_t("Warning: this is the only time this code will be displayed!")}</b></p>
+                {/* end tchap */}
                 <p>
                     {_t(
                         "Store your Security Key somewhere safe, like a password manager or a safe, as it's used to safeguard your encrypted data.",
@@ -757,6 +793,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                             <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>
                         </div>
                         <div className="mx_CreateSecretStorageDialog_recoveryKeyButtons">
+                            {/* :TCHAP: remove
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary"
@@ -771,6 +808,7 @@ export default class CreateSecretStorageDialog extends React.PureComponent<IProp
                                     copyButton: "",
                                 })}
                             </span>
+                            end :TCHAP: */}
                             <AccessibleButton
                                 kind="primary"
                                 className="mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn"
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
index 23fcffa..d224632 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/CompleteSecurity.tsx
@@ -66,7 +66,9 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
             return null;
         } else if (phase === Phase.Intro) {
             if (lostKeys) {
-                icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
+                //:tchap: hide anxious icon of warning
+                //icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
+                //:tchap: end
                 title = _t("Unable to verify this device");
             } else {
                 icon = <span className="mx_CompleteSecurity_headerIcon mx_E2EIcon_warning" />;
@@ -92,9 +94,16 @@ export default class CompleteSecurity extends React.Component<IProps, IState> {
 
         let skipButton;
         if (phase === Phase.Intro || phase === Phase.ConfirmReset) {
+            // :Tchap: Condition to skip Phase.ConfirmSkip and its "Are you sure" modal after login for csss
+            const tchapOnSkipClick = phase === Phase.Intro ? this.props.onFinished : this.onSkipClick;
+            // end :Tchap:
+
             skipButton = (
                 <AccessibleButton
-                    onClick={this.onSkipClick}
+                    // :tchap: remove onClick={this.onSkipClick}
+                    // add instead
+                    onClick={tchapOnSkipClick}
+                    // end :tchap:
                     className="mx_CompleteSecurity_skip"
                     aria-label={_t("Skip verification for now")}
                 />
diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
index f8781cd..b6b538b 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/SetupEncryptionBody.tsx
@@ -28,6 +28,10 @@ import { SetupEncryptionStore, Phase } from "../../../stores/SetupEncryptionStor
 import EncryptionPanel from "../../views/right_panel/EncryptionPanel";
 import AccessibleButton, { ButtonEvent } from "../../views/elements/AccessibleButton";
 import Spinner from "../../views/elements/Spinner";
+import defaultDispatcher from "../../../dispatcher/dispatcher";
+import { Action } from "matrix-react-sdk/src/dispatcher/actions";
+import { UserTab } from "matrix-react-sdk/src/components/views/dialogs/UserTab";
+import { OpenToTabPayload } from "matrix-react-sdk/src/dispatcher/payloads/OpenToTabPayload";
 
 function keyHasPassphrase(keyInfo: ISecretStorageKeyInfo): boolean {
     return Boolean(keyInfo.passphrase && keyInfo.passphrase.salt && keyInfo.passphrase.iterations);
@@ -160,14 +164,24 @@ export default class SetupEncryptionBody extends React.Component<IProps, IState>
                 return (
                     <div>
                         <p>
+                            {/* :tchap: change message format by adding <p>
                             {_t(
                                 "It looks like you don't have a Security Key or any other devices you can verify against.  This device will not be able to access old encrypted messages. In order to verify your identity on this device, you'll need to reset your verification keys.",
                             )}
+                            :tchap: end
+                            */}
+
+                            {_t(
+                                "<p>The Tchap team is working on the deployment of a new feature to "+
+                                "prevent encryption key loss.</p>"+
+                                "<p> You can access it in the section :</p><p>Security and privacy > Secure Backup</p>",
+                                 {}, { 'p': (sub) => <p>{sub}</p>}      
+                            )}
                         </p>
 
                         <div className="mx_CompleteSecurity_actionRow">
                             <AccessibleButton kind="primary" onClick={this.onResetConfirmClick}>
-                                {_t("Proceed with reset")}
+                                {_t("Set up")}
                             </AccessibleButton>
                         </div>
                     </div>
diff --git a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
index 873780b..2f9b28d 100644
--- a/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
+++ b/node_modules/matrix-react-sdk/src/toasts/SetupEncryptionToast.ts
@@ -50,7 +50,9 @@ const getIcon = (kind: Kind): string => {
 const getSetupCaption = (kind: Kind): string => {
     switch (kind) {
         case Kind.SET_UP_ENCRYPTION:
+            // :tchap: return _t("Continue");
             return _t("action|continue");
+            // end :tchap:
         case Kind.UPGRADE_ENCRYPTION:
             return _t("action|upgrade");
         case Kind.VERIFY_THIS_SESSION:
