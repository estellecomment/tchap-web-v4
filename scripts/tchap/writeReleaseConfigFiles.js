/**
 * Writes the files in tchap-infra that you need to create a deployment.
 *
 * Usage : node scripts/tchap/writeReleaseConfigFiles.js --current=4.3.9 --new=4.3.9 --beta=4.3.10
 *
 * This script expects to be run from the root of the tchap-web-v4 repo.
 * The tchap-infra repo should be in a dir next to the tchap-web-v4 repo.
 * Don't run it too many times because the github api will block you :facepalm: Waiting will get you unblocked.
 *
 * Todo :
 *  - custom location of tchap-infra dir
 *  - use token to avoid being throttled
 *  - create the pr !
 */

const fs = require('fs');

const fetchReleaseDetails = require('./fetchReleaseDetails').fetchReleaseDetails;

if (process.argv.length < 5) {
  console.error('Expected arguments like : --current=4.1.2 --new=4.1.3 --beta=4.1.4');
  process.exit(1);
}
const args = {};
process.argv.slice(2).forEach((arg) => {
  const parts = arg.split("--")[1].split("=")
  args[parts[0]] = parts[1];
});
console.log('Found args: ', args);
// todo maybe a bit more input validation...


/*
 * String looks like :
---
current_version: 4.3.fas
current_version_zip_date: 202310fda

new_version: 4.3.asdf
new_version_zip_date: 2023100sdf

beta_version: 4.3safd
beta_version_zip_date: 202310sdf
 */
const prepareStringToWrite = async (args) => {
  let stringToWrite = "---\n";

  for (const [cookieName, version] of Object.entries(args)) {
    // cookieName = e.g. current
    // version = e.g. 4.3.10
    const releaseDetails = await fetchReleaseDetails(version)
    const date = releaseDetails[0].date;
    // Note : we fetch too much detail, now that we simplified the string to write...
    // Still leaving it in case we need it.

    stringToWrite += cookieName + "_version: " + version + "\n";
    stringToWrite += cookieName + "_version_zip_date: " + date + "\n\n";
  }
  return stringToWrite;
};

// env = e.g. "preprod"
const writeFileForEnv = (stringToWrite, envName) => {
  const fileToWrite = "../tchap-infra/ansible/inventory-" + envName + "/group_vars/webserver/vars";
  const fileContents = fs.readFileSync(fileToWrite, 'utf8'); // store existing contents into a var
  // Write our new piece
  fs.writeFileSync(fileToWrite, stringToWrite, err => {
    if (err) {
      console.error(err);
    }
  });
  // rewrite the existing contents, without the first 9 lines.
  const lines = fileContents.split('\n');
  lines.splice(0, 9);
  const toWrite = lines.join('\n');
  fs.appendFileSync(fileToWrite, toWrite, err => {
    if (err) {
      console.error(err);
    }
  });
};

prepareStringToWrite(args).then(stringToWrite => {
  for (const envName of ["prod", "preprod", "dev"]) {
    writeFileForEnv(envName, stringToWrite);
  }
});

// Todo
// cd ../tchap-infra
// git checkout -B <branchname>
// git add .
// git commit -m "Deployment of tchap-web - <today>"
// git push --set-upstream origin <branchname>
// open PR (needs gh cli) with description saying it's autogenerated.
// cd ../tchap-web-v4
